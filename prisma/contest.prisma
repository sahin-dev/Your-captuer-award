
//Contest models

model Contest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  banner         String?       @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  status         ContestStatus @default(UPCOMING)
  mode           ContestMode  @default(SOLO)
  maxUploads     Int          @default(1)
  isMoneyContest Boolean       @default(false)
  maxPrize       Int?          @default(0)
  minPrize       Int?          @default(0)
  level_requirements    Int[]
  
  startDate DateTime
  endDate   DateTime
  startedAt DateTime?

  creatorId String @db.ObjectId
  rules     Json?
  prizes    Json?

  creator      User                 @relation(fields: [creatorId], references: [id])
  participants ContestParticipant[]
  teamParticipations    TeamParticipation[]
  votes        Vote[]
  contestRules ContestRule[] 
  contestPrizes ContestPrize[]
  achievements ContestAchievement[]
  teamMatch    TeamMatch[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("contests")

}


model RecurringContest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  banner         String?       @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  maxUploads     Int          @default(1)
  isMoneyContest Boolean       @default(false)
  maxPrize       Int?          @default(0)
  minPrize       Int?          @default(0)
  level_requirements    Int[]
  
  startDate DateTime
  endDate   DateTime

  creatorId String @db.ObjectId
  recurring RecurringData

  rules Json 
  prizes Json
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  @@map("recurring_contests")
}


model ContestRule {
  id    String  @id @default(auto())  @map("_id")  @db.ObjectId
  icon  String?
  name    String
  description     String
  contestId    String  @db.ObjectId
  contest  Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("contest_rules")
}


model ContestPhoto {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  contestId     String  @db.ObjectId
  participantId String  @db.ObjectId
  photoId       String  @db.ObjectId
  rank          Int?    @default(0)
  promoted     Boolean @default(false)
  promotionExpiresAt DateTime?
  initialVotes  Int  @default(0)  
  // contest   Contest @relation(fields: [contestId],references: [id])
  participant  ContestParticipant   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  votes        Vote[]
  photo        UserPhoto            @relation(fields: [photoId], references: [id], onDelete: Cascade)
  comments     Comment[]
  achievements ContestAchievement[]
  ContestWinner ContestWinner[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("contest_photos")

}


model ContestWinner {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  participantId  String             @db.ObjectId
  contestId      String             @db.ObjectId
  contestPhotoId String             @db.ObjectId

  participant    ContestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  photo         ContestPhoto        @relation(fields: [contestPhotoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_winners")
}

model ContestParticipant {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  status    ContestParticipantStatus @default(ACTIVE)
  contestId String                   @db.ObjectId
  userId    String                   @db.ObjectId
  memberId    String?                   @db.ObjectId
  level     YCLevel                  @default(NEW)
  rank      Int?                     @default(0)
  exposure_bonus  Int     @default(100)

  contest            Contest              @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id])
  member                TeamMember?                @relation(fields: [memberId], references: [id])
  photos             ContestPhoto[]
  ContestWinner      ContestWinner[]
  contestAchievement ContestAchievement[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_participants")
  @@unique([contestId, userId])
}

model ContestPrize {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  category   PrizeType
  trades   Int  @default(0)
  charges    Int   @default(0)
  keys     Int   @default(0)

  contestId   String @db.ObjectId 
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@map("contest_prizes")
}

model ContestAchievement {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  category          PrizeType
  photoId       String?          @db.ObjectId
  participantId String?          @db.ObjectId
  contestId     String           @db.ObjectId

  photo       ContestPhoto?       @relation(fields: [photoId], references: [id])
  contest     Contest             @relation(fields: [contestId], references: [id])

  participant ContestParticipant? @relation(fields: [participantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_achievements")
}




type Rules {
  name    String
  icon    String
  description   String
}


type RecurringData {
  recurringType      RecurringType
  previousOccurrence DateTime?
  nextOccurrence     DateTime
  duration           Int           @default(0)
}

enum PrizeType {
  TOP_PHOTO
  TOP_PHOTOGRAPHER
  TOP_YC_PICK
}


enum ContestMode {
  SOLO
  TEAM
}


enum ContestStatus {
  JOINED
  OPEN
  NEW // Just created, not started yet
  UPCOMING // Contest is upcoming, not started yet
  ACTIVE // Contest is currently active
  COMPLETED // Contest has ended and winners are announced
  CLOSED // Contest is closed for new participants
}

enum ContestType {
  ONETIME
  RECURRING
}


enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
}

enum ContestLevel {
  POPULAR
  SKILLED
  PREMIER
  ELITE
  ALL_STAR
}

enum YCLevel {
  NEW
  AMATEUR
  TALENTED
  SUPREME
  SUPERIOR
  TOP_NOTCH
}

enum ContestParticipantStatus {
  ACTIVE
  BLOCKED
}