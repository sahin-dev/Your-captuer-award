
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.ContestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  banner: 'banner',
  status: 'status',
  mode: 'mode',
  maxUploads: 'maxUploads',
  isMoneyContest: 'isMoneyContest',
  maxPrize: 'maxPrize',
  minPrize: 'minPrize',
  level_requirements: 'level_requirements',
  startDate: 'startDate',
  endDate: 'endDate',
  startedAt: 'startedAt',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringContestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  banner: 'banner',
  maxUploads: 'maxUploads',
  isMoneyContest: 'isMoneyContest',
  maxPrize: 'maxPrize',
  minPrize: 'minPrize',
  level_requirements: 'level_requirements',
  startDate: 'startDate',
  endDate: 'endDate',
  creatorId: 'creatorId',
  rules: 'rules',
  prizes: 'prizes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestRuleScalarFieldEnum = {
  id: 'id',
  icon: 'icon',
  name: 'name',
  description: 'description',
  contestId: 'contestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestPhotoScalarFieldEnum = {
  id: 'id',
  title: 'title',
  contestId: 'contestId',
  participantId: 'participantId',
  photoId: 'photoId',
  rank: 'rank',
  promoted: 'promoted',
  promotionExpiresAt: 'promotionExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestWinnerScalarFieldEnum = {
  id: 'id',
  participantId: 'participantId',
  contestId: 'contestId',
  contestPhotoId: 'contestPhotoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestParticipantScalarFieldEnum = {
  id: 'id',
  status: 'status',
  contestId: 'contestId',
  userId: 'userId',
  memberId: 'memberId',
  level: 'level',
  rank: 'rank',
  exposure_bonus: 'exposure_bonus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestPrizeScalarFieldEnum = {
  id: 'id',
  category: 'category',
  trades: 'trades',
  charges: 'charges',
  keys: 'keys',
  contestId: 'contestId'
};

exports.Prisma.ContestAchievementScalarFieldEnum = {
  id: 'id',
  category: 'category',
  photoId: 'photoId',
  participantId: 'participantId',
  contestId: 'contestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  isSent: 'isSent',
  isRead: 'isRead',
  receiverId: 'receiverId',
  createdAt: 'createdAt',
  updatedAT: 'updatedAT'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  status: 'status',
  productId: 'productId',
  userId: 'userId',
  stripe_intent_id: 'stripe_intent_id',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SitePolicyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  senderId: 'senderId',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productType: 'productType',
  title: 'title',
  quantity: 'quantity',
  amount: 'amount',
  icon: 'icon',
  description: 'description',
  image: 'image'
};

exports.Prisma.PriceScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  name: 'name',
  amount: 'amount',
  quantity: 'quantity',
  price_id: 'price_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  language: 'language',
  country: 'country',
  description: 'description',
  accessibility: 'accessibility',
  score: 'score',
  win: 'win',
  lost: 'lost',
  badge: 'badge',
  min_requirement: 'min_requirement',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  status: 'status',
  level: 'level',
  teamId: 'teamId',
  memberId: 'memberId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamParticipationScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  contestId: 'contestId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  cover: 'cover',
  avatar: 'avatar',
  socialId: 'socialId',
  socialProvider: 'socialProvider',
  firstName: 'firstName',
  lastName: 'lastName',
  fullName: 'fullName',
  username: 'username',
  phone: 'phone',
  email: 'email',
  location: 'location',
  country: 'country',
  password: 'password',
  role: 'role',
  accessToken: 'accessToken',
  currentLevel: 'currentLevel',
  voting_power: 'voting_power',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStoreScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  promotes: 'promotes',
  trades: 'trades',
  charges: 'charges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  userId: 'userId',
  views: 'views',
  labels: 'labels',
  title: 'title',
  description: 'description',
  adult: 'adult',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  photoId: 'photoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  code: 'code',
  expires_in: 'expires_in',
  userId: 'userId',
  otpStatus: 'otpStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  text: 'text',
  providerId: 'providerId',
  photoId: 'photoId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoteScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  photoId: 'photoId',
  contestId: 'contestId',
  type: 'type',
  power: 'power',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserLevelScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  levelId: 'levelId'
};

exports.Prisma.LevelScalarFieldEnum = {
  id: 'id',
  level: 'level',
  levelName: 'levelName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.ContestStatus = exports.$Enums.ContestStatus = {
  JOINED: 'JOINED',
  OPEN: 'OPEN',
  NEW: 'NEW',
  UPCOMING: 'UPCOMING',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CLOSED: 'CLOSED'
};

exports.ContestMode = exports.$Enums.ContestMode = {
  SOLO: 'SOLO',
  TEAM: 'TEAM'
};

exports.ContestParticipantStatus = exports.$Enums.ContestParticipantStatus = {
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.YCLevel = exports.$Enums.YCLevel = {
  NEW: 'NEW',
  AMATEUR: 'AMATEUR',
  TALENTED: 'TALENTED',
  SUPREME: 'SUPREME',
  SUPERIOR: 'SUPERIOR',
  TOP_NOTCH: 'TOP_NOTCH'
};

exports.PrizeType = exports.$Enums.PrizeType = {
  TOP_PHOTO: 'TOP_PHOTO',
  TOP_PHOTOGRAPHER: 'TOP_PHOTOGRAPHER',
  TOP_YC_PICK: 'TOP_YC_PICK'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED'
};

exports.SitePolicyType = exports.$Enums.SitePolicyType = {
  TERMS: 'TERMS',
  POLICY: 'POLICY',
  ABOUT: 'ABOUT'
};

exports.ProductType = exports.$Enums.ProductType = {
  KEY: 'KEY',
  PROMOTE: 'PROMOTE',
  CHARGE: 'CHARGE'
};

exports.TeamAccessibility = exports.$Enums.TeamAccessibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.TeamMemberStatus = exports.$Enums.TeamMemberStatus = {
  ACTIVE: 'ACTIVE',
  REMOVED: 'REMOVED',
  BLOCKED: 'BLOCKED'
};

exports.MemberLevel = exports.$Enums.MemberLevel = {
  NEW: 'NEW',
  EXPERT: 'EXPERT',
  MASTER: 'MASTER',
  LEADER: 'LEADER'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.OtpStatus = exports.$Enums.OtpStatus = {
  CREATED: 'CREATED',
  VALIDATED: 'VALIDATED'
};

exports.VoteType = exports.$Enums.VoteType = {
  Promoted: 'Promoted',
  Organic: 'Organic'
};

exports.LevelName = exports.$Enums.LevelName = {
  APPRENTICE: 'APPRENTICE',
  STUDENT: 'STUDENT',
  TRAINED: 'TRAINED',
  TALENTED: 'TALENTED',
  CONTENDER: 'CONTENDER',
  VIRTUOSO: 'VIRTUOSO',
  LEADER: 'LEADER',
  AVANTGARDE: 'AVANTGARDE',
  PRO: 'PRO'
};

exports.RecurringType = exports.$Enums.RecurringType = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.Prisma.ModelName = {
  Contest: 'Contest',
  RecurringContest: 'RecurringContest',
  ContestRule: 'ContestRule',
  ContestPhoto: 'ContestPhoto',
  ContestWinner: 'ContestWinner',
  ContestParticipant: 'ContestParticipant',
  ContestPrize: 'ContestPrize',
  ContestAchievement: 'ContestAchievement',
  Notification: 'Notification',
  Payment: 'Payment',
  SitePolicy: 'SitePolicy',
  Room: 'Room',
  Chat: 'Chat',
  Product: 'Product',
  Price: 'Price',
  Team: 'Team',
  TeamMember: 'TeamMember',
  TeamParticipation: 'TeamParticipation',
  User: 'User',
  UserStore: 'UserStore',
  UserPhoto: 'UserPhoto',
  Like: 'Like',
  Otp: 'Otp',
  Comment: 'Comment',
  Follow: 'Follow',
  Vote: 'Vote',
  UserLevel: 'UserLevel',
  Level: 'Level'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
