//Contest models

model Contest {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  banner             String?       @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  status             ContestStatus @default(UPCOMING)
  mode               ContestMode   @default(SOLO)
  maxUploads         Int           @default(1)
  isMoneyContest     Boolean       @default(false)
  maxPrize           Int?          @default(0)
  minPrize           Int?          @default(0)
  level_requirements Int[]

  startDate DateTime
  endDate   DateTime
  startedAt DateTime?

  creatorId String @db.ObjectId

  creator            User                 @relation(fields: [creatorId], references: [id])
  participants       ContestParticipant[]
  teamParticipations TeamParticipation[]
  votes              Vote[]
  contestRules       ContestRule[]
  contestPrizes      ContestPrize[]
  achievements       ContestAchievement[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("contests")
}

model RecurringContest {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  banner             String? @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  maxUploads         Int     @default(1)
  isMoneyContest     Boolean @default(false)
  maxPrize           Int?    @default(0)
  minPrize           Int?    @default(0)
  level_requirements Int[]

  startDate DateTime
  endDate   DateTime

  creatorId String        @db.ObjectId
  recurring RecurringData

  rules     Json
  prizes    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recurring_contests")
}

model ContestRule {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  icon        String?
  name        String
  description String
  contestId   String  @db.ObjectId
  contest     Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_rules")
}

model ContestPhoto {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String?
  contestId          String               @db.ObjectId
  participantId      String               @db.ObjectId
  photoId            String               @db.ObjectId
  rank               Int?                 @default(0)
  promoted           Boolean              @default(false)
  promotionExpiresAt DateTime?
  // contest   Contest @relation(fields: [contestId],references: [id])
  participant        ContestParticipant   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  votes              Vote[]
  photo              UserPhoto            @relation(fields: [photoId], references: [id], onDelete: Cascade)
  comments           Comment[]
  achievements       ContestAchievement[]
  ContestWinner      ContestWinner[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("contest_photos")
}

model ContestWinner {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  participantId  String @db.ObjectId
  contestId      String @db.ObjectId
  contestPhotoId String @db.ObjectId

  participant ContestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  photo       ContestPhoto       @relation(fields: [contestPhotoId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("contest_winners")
}

model ContestParticipant {
  id             String                   @id @default(auto()) @map("_id") @db.ObjectId
  status         ContestParticipantStatus @default(ACTIVE)
  contestId      String                   @db.ObjectId
  userId         String                   @db.ObjectId
  memberId       String?                  @db.ObjectId
  level          YCLevel                  @default(NEW)
  rank           Int?                     @default(0)
  exposure_bonus Int                      @default(100)

  contest            Contest              @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
  member             TeamMember?          @relation(fields: [memberId], references: [id])
  photos             ContestPhoto[]
  ContestWinner      ContestWinner[]
  contestAchievement ContestAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contestId, userId])
  @@map("contest_participants")
}

model ContestPrize {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  category PrizeType
  trades   Int       @default(0)
  charges  Int       @default(0)
  keys     Int       @default(0)

  contestId String  @db.ObjectId
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@map("contest_prizes")
}

model ContestAchievement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  category      PrizeType
  photoId       String?   @db.ObjectId
  participantId String?   @db.ObjectId
  contestId     String    @db.ObjectId

  photo   ContestPhoto? @relation(fields: [photoId], references: [id])
  contest Contest       @relation(fields: [contestId], references: [id])

  participant ContestParticipant? @relation(fields: [participantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_achievements")
}

type Rules {
  name        String
  icon        String
  description String
}

type RecurringData {
  recurringType      RecurringType
  previousOccurrence DateTime?
  nextOccurrence     DateTime
  duration           Int           @default(0)
}

enum PrizeType {
  TOP_PHOTO
  TOP_PHOTOGRAPHER
  TOP_YC_PICK
}

enum ContestMode {
  SOLO
  TEAM
}

enum ContestStatus {
  JOINED
  OPEN
  NEW // Just created, not started yet
  UPCOMING // Contest is upcoming, not started yet
  ACTIVE // Contest is currently active
  COMPLETED // Contest has ended and winners are announced
  CLOSED // Contest is closed for new participants
}

enum ContestType {
  ONETIME
  RECURRING
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
}

enum ContestLevel {
  POPULAR
  SKILLED
  PREMIER
  ELITE
  ALL_STAR
}

enum YCLevel {
  NEW
  AMATEUR
  TALENTED
  SUPREME
  SUPERIOR
  TOP_NOTCH
}

enum ContestParticipantStatus {
  ACTIVE
  BLOCKED
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  message    String
  isSent     Boolean  @default(false)
  isRead     Boolean  @default(false)
  receiverId String
  createdAt  DateTime @default(now())
  updatedAT  DateTime @updatedAt

  @@map("notifications")
}

model Payment {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  status           PaymentStatus
  productId        String        @db.ObjectId
  userId           String        @db.ObjectId
  stripe_intent_id String?
  amount           Float
  currency         String
  method           String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
}

model SitePolicy {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  type    SitePolicyType
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_policies")
}

enum SitePolicyType {
  TERMS
  POLICY
  ABOUT
}

model Room {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  teamId String @unique @db.ObjectId

  @@map("rooms")
}

model Chat {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String @db.ObjectId
  senderId String @db.ObjectId
  message  String

  team      Team     @relation(fields: [teamId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prismaClient/"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  productType ProductType
  title       String
  quantity    Int
  amount      Float
  icon        String?
  description String?
  image       String?

  @@index([id, productType])
  @@map("products")
}

model Price {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  product_id String @db.ObjectId
  name       String
  amount     Float
  quantity   Int
  price_id   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, product_id])
  @@map("prices")
}

enum ProductType {
  KEY
  PROMOTE
  CHARGE
}

model Team {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  level           String
  language        String
  country         String
  description     String
  accessibility   TeamAccessibility   @default(PUBLIC)
  score           Int                 @default(0)
  win             Int                 @default(0)
  lost            Int                 @default(0)
  badge           String //Image file
  min_requirement Int
  creatorId       String              @db.ObjectId
  creator         User                @relation(fields: [creatorId], references: [id])
  members         TeamMember[]
  chat            Chat[]
  participations  TeamParticipation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model TeamMember {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  status TeamMemberStatus @default(ACTIVE)
  level  MemberLevel      @default(NEW)

  teamId             String               @db.ObjectId
  memberId           String               @unique @db.ObjectId
  team               Team                 @relation(fields: [teamId], references: [id])
  member             User                 @relation(fields: [memberId], references: [id])
  contestParticipant ContestParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

model TeamParticipation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  teamId    String @db.ObjectId
  contestId String @db.ObjectId

  team    Team    @relation(references: [id], fields: [teamId])
  contest Contest @relation(references: [id], fields: [contestId])

  @@unique([teamId, contestId])
  @@index([teamId])
  @@map("team_participations")
}

enum TeamAccessibility {
  PUBLIC
  PRIVATE
}

enum TeamMemberStatus {
  ACTIVE
  REMOVED
  BLOCKED
}

enum MemberLevel {
  NEW
  EXPERT
  MASTER
  LEADER
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  cover              String?              @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  avatar             String?              @default("https://plus.unsplash.com/premium_photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  socialId           String?
  socialProvider     String?
  firstName          String?
  lastName           String?
  fullName           String?
  username           String?
  phone              String?
  email              String               @unique
  location           String?
  country            String?
  password           String?
  role               UserRole             @default(USER)
  accessToken        String?
  currentLevel       Int                  @default(-1)
  voting_power       Int                  @default(1)
  level              UserLevel?
  otps               Otp?
  store              UserStore?
  createdTeam        Team[]
  joinedTeam         TeamMember?
  createdContests    Contest[]
  commentProvides    Comment[]            @relation("provider")
  followers          Follow[]             @relation(name: "follower")
  followings         Follow[]             @relation(name: "following")
  votes              Vote[]
  likes              Like[]
  userPhotos         UserPhoto[]
  ContestParticipant ContestParticipant[]
  chat               Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserStore {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique @db.ObjectId
  promotes Int    @default(0)
  trades   Int    @default(0)
  charges  Int    @default(0)

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_stores")
}

model UserPhoto {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  userId      String      @db.ObjectId
  states      PhotoStats?
  views       Int         @default(0)
  labels      String[]    @default([])
  title       String?
  description String?
  adult       Boolean     @default(false)

  user          User           @relation(fields: [userId], references: [id])
  contestUpload ContestPhoto[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_photos")
}

model Like {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  providerId String @db.ObjectId
  photoId    String @db.ObjectId

  provider User      @relation(fields: [providerId], references: [id])
  photo    UserPhoto @relation(fields: [photoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoId, providerId])
  @@map("likes")
}

model Otp {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String
  expires_in DateTime
  userId     String   @unique @db.ObjectId

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  otpStatus OtpStatus @default(CREATED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("otps")
}

model Comment {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  providerId String  @db.ObjectId
  photoId    String? @db.ObjectId
  parentId   String? @db.ObjectId

  provider       User          @relation(name: "provider", fields: [providerId], references: [id])
  photo          ContestPhoto? @relation(fields: [photoId], references: [id])
  parent         Comment?      @relation(name: "replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentReplies Comment[]     @relation("replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation(name: "follower", fields: [followerId], references: [id])
  following   User   @relation(name: "following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  providerId String   @db.ObjectId
  photoId    String   @db.ObjectId
  contestId  String   @db.ObjectId
  type       VoteType
  power      Int      @default(1)

  provider User         @relation(fields: [providerId], references: [id])
  photo    ContestPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)
  contest  Contest      @relation(fields: [contestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("votes")
}

model UserLevel {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  levelId String @db.ObjectId

  level Level @relation(references: [id], fields: [levelId])
  user  User? @relation(references: [id], fields: [userId])

  @@map("user_levels")
}

model Level {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  level        Int
  levelName    LevelName
  requirements LevelRequirement[]
  userLevel    UserLevel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Love {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   providerId String @db.ObjectId
//   photoId    String @db.ObjectId

//   provider User      @relation(fields: [providerId], references: [id])
//   photo    UserPhoto @relation(fields: [photoId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("loves")
// }

type LevelRequirement {
  title    String
  required Int
  badge    Badge
}

type Badge {
  type  String
  param String
}

enum LevelName {
  APPRENTICE
  STUDENT
  TRAINED
  TALENTED
  CONTENDER
  VIRTUOSO
  LEADER
  AVANTGARDE
  PRO
}

enum VoteType {
  Promoted
  Organic
}

enum UserRole {
  USER
  ADMIN
}

enum OtpStatus {
  CREATED
  VALIDATED
}

type PhotoStats {
  Composition Int @default(0)
  Content     Int @default(0)
  Creativity  Int @default(0)
  Technique   Int @default(0)
}
