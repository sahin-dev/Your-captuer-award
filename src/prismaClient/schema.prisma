//Contest models

model Contest {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  banner             String?       @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  status             ContestStatus @default(UPCOMING)
  maxUploads         Int?          @default(1)
  isMoneyContest     Boolean       @default(false)
  maxPrize           Int?          @default(0)
  minPrize           Int?          @default(0)
  level_requirements Int[]

  startDate DateTime
  endDate   DateTime

  creatorId String @db.ObjectId

  creator       User                  @relation(fields: [creatorId], references: [id])
  participants  ContestParticipant[]
  votes         Vote[]
  contestRules  ContestRule[]
  contestPrizes ContestPrize[]
  recurringData RecurringContestData?
  achievements  ContestAchievement[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@map("contests")
}

type Rules {
  name        String
  icon        String
  description String
}

model ContestRule {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  icon        String?
  name        String
  description String
  contestId   String  @db.ObjectId

  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_rules")
}

model RecurringContestData {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  contestId     String        @unique @db.ObjectId
  lastRunAt     DateTime
  recurringType RecurringType
  nextRunAt     DateTime
  contest       Contest       @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@map("recurring_contest_data")
}

model RecurringContest {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  creatorId      String  @db.ObjectId
  title          String
  description    String
  banner         String? @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  maxUploads     Int?    @default(1)
  isMoneyContest Boolean @default(false)
  maxPrize       Int?    @default(0)
  minPrize       Int?    @default(0)

  recurringData RecurringData

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recurring_contests")
}

model ContestPhoto {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  contestId     String  @db.ObjectId
  participantId String  @db.ObjectId
  photoId       String  @db.ObjectId
  rank          Int?    @default(0)

  // contest   Contest @relation(fields: [contestId],references: [id])
  participant   ContestParticipant   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  votes         Vote[]
  photo         UserPhoto            @relation(fields: [photoId], references: [id], onDelete: Cascade)
  comments      Comment[]
  achievements  ContestAchievement[]
  ContestWinner ContestWinner[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@map("contest_photos")
}

model ContestWinner {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  participantId  String @db.ObjectId
  contestId      String @db.ObjectId
  contestPhotoId String @db.ObjectId

  participant ContestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  photo       ContestPhoto       @relation(fields: [contestPhotoId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("contest_winners")
}

model ContestParticipant {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  status    ContestParticipantStatus @default(ACTIVE)
  contestId String                   @db.ObjectId
  userId    String                   @db.ObjectId
  level     YCLevel                  @default(AMATEUR)
  rank      Int?                     @default(0)

  contest            Contest              @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id])
  photos             ContestPhoto[]
  ContestWinner      ContestWinner[]
  contestAchievement ContestAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contestId, userId])
  @@map("contest_participants")
}

model ContestPrize {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  category PrizeType
  trades   Int       @default(0)
  charges  Int       @default(0)
  keys     Int       @default(0)

  contestId String  @db.ObjectId
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@map("contest_prizes")
}

model ContestAchievement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  category      PrizeType
  photoId       String?   @db.ObjectId
  participantId String?   @db.ObjectId
  contestId     String    @db.ObjectId

  photo   ContestPhoto? @relation(fields: [photoId], references: [id])
  contest Contest       @relation(fields: [contestId], references: [id])

  participant ContestParticipant? @relation(fields: [participantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contest_achievements")
}

type RecurringData {
  recurringType      RecurringType
  previousOccurrence DateTime
  nextOccurrence     DateTime
  duration           Int           @default(0)
}

enum PrizeType {
  TOP_PHOTO
  TOP_PHOTOGRAPHER
  TOP_YC_PICK
}

enum ContestStatus {
  NEW
  UPCOMING
  ACTIVE
  OPEN
  CLOSED
}

enum ContestType {
  ONETIME
  RECURRING
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
}

enum ContestLevel {
  POPULAR
  SKILLED
  PREMIER
  ELITE
  ALL_STAR
}

enum YCLevel {
  AMATEUR
  TALANTED
  SUPREME
  SUPERIOR
  TOP_NOTCH
}

enum ContestParticipantStatus {
  ACTIVE
  BLOCKED
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prismaClient/"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Team {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  level         String
  language      String
  country       String
  description   String
  accessibility TeamAccessibility
  badge         String //Image file
  creatorId     String            @db.ObjectId
  creator       User              @relation(fields: [creatorId], references: [id])
  members       TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model TeamMember {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  status TeamMemberStatus @default(ACTIVE)

  teamId   String @db.ObjectId
  memberId String @unique @db.ObjectId
  team     Team   @relation(fields: [teamId], references: [id])
  member   User   @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

enum TeamAccessibility {
  PUBLIC
  PRIVATE
}

enum TeamMemberStatus {
  ACTIVE
  REMOVED
  BLOCKED
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  cover              String?              @default("https://images.unsplash.com/photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  avatar             String?              @default("https://plus.unsplash.com/premium_photo-1689539137236-b68e436248de?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  socialId           String?
  socialProvider     String?
  firstName          String?
  lastName           String?
  fullName           String?
  username           String?
  phone              String?
  email              String               @unique
  location           String?
  level              UserLevel?           @default(APPRENTICE)
  password           String?
  role               UserRole             @default(USER)
  accessToken        String?
  otps               Otp?
  store              UserStore?
  createdTeam        Team[]
  joinedTeam         TeamMember?
  createdContests    Contest[]
  commentProvides    Comment[]            @relation("provider")
  followers          Follow[]             @relation(name: "follower")
  followings         Follow[]             @relation(name: "following")
  votes              Vote[]
  likes              Like[]
  userPhotos         UserPhoto[]
  ContestParticipant ContestParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserStore {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  keys    Int    @default(0)
  trades  Int    @default(0)
  charges Int    @default(0)

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_stores")
}

model UserPhoto {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  userId      String      @db.ObjectId
  states      PhotoStats?
  views       Int         @default(0)
  labels      String[]    @default([])
  title       String?
  description String?
  adult       Boolean     @default(false)

  user          User           @relation(fields: [userId], references: [id])
  contestUpload ContestPhoto[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_photos")
}

model Like {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  providerId String @db.ObjectId
  photoId    String @db.ObjectId

  provider User      @relation(fields: [providerId], references: [id])
  photo    UserPhoto @relation(fields: [photoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoId, providerId])
  @@map("likes")
}

model Otp {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String
  expires_in DateTime
  userId     String   @unique @db.ObjectId

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  otpStatus OtpStatus @default(CREATED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("otps")
}

model Comment {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  providerId String  @db.ObjectId
  receiverId String  @db.ObjectId
  parentId   String? @db.ObjectId

  provider       User         @relation(name: "provider", fields: [providerId], references: [id])
  receiver       ContestPhoto @relation(fields: [receiverId], references: [id])
  parent         Comment?     @relation(name: "replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CommentReplies Comment[]    @relation("replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation(name: "follower", fields: [followerId], references: [id])
  following   User   @relation(name: "following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

model Vote {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  providerId String @db.ObjectId
  photoId    String @db.ObjectId
  contestId  String @db.ObjectId

  provider User         @relation(fields: [providerId], references: [id])
  photo    ContestPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)
  contest  Contest      @relation(fields: [contestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("votes")
}

// model Love {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   providerId String @db.ObjectId
//   photoId    String @db.ObjectId

//   provider User      @relation(fields: [providerId], references: [id])
//   photo    UserPhoto @relation(fields: [photoId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("loves")
// }

enum UserLevel {
  APPRENTICE
  STUDENT
  TRAINED
  TALENTED
  CONTENDER
  VIRTUOSO
  LEADER
  AVANTGARDE
  PRO
}

enum UserRole {
  USER
  ADMIN
}

enum OtpStatus {
  CREATED
  VALIDATED
}

type PhotoStats {
  Composition Int @default(0)
  Content     Int @default(0)
  Creativity  Int @default(0)
  Technique   Int @default(0)
}
